(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                        ("marmalade" . "http://marmalade-repo.org/packages/")
                        ("melpa" . "http://melpa.org/packages/")))
(package-initialize)
;(package-refresh-contents)

;; Package Installation
;(package-install 'intero)
;(package-install 'zenburn-theme)
;(package-install 'auto-complete-clang)
;(package-install 'yaml-mode)
;(package-install 'rainbow-delimiters)
;(package-install 'cmake-mode)

;; Disable bell
(setq ring-bell-function 'ignore)

;; Set up flycheck
(setq flycheck-check-syntax-automatically '(mode-enabled save))
(setq flycheck-clang-args (list "-Wall" "-pedantic" "-std=c++11" "-fsyntax-only" "-fno-color-diagnostics"))

;; Report to the window manager
(setq frame-title-format "%f")
(setq ghc-ghc-options '("-fdefer-type-errors"))

(add-to-list 'auto-mode-alist '("/mutt" . flyspell-mode))
(add-to-list 'auto-mode-alist '("\\.ipp\\'" . c++-mode))

;; Regular paths
(add-to-list 'load-path "~/.emacs.d/loadables")
(add-to-list 'load-path "~/.emacs.d/loadables/shm")

;; Theme paths
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

;; Setup variables
(setq inhibit-default-init t)
(setq indent-tabs-mode nil)
(setq c-toggle-hungry-state t)
(setq line-number-mode    t)
(setq column-number-mode  t)
(fset 'yes-or-no-p 'y-or-n-p)
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(setq-default fill-column 80)

;; Setup minor modes that look like variables
(add-hook `after-revert-hook (lambda ()
                               (interactive)
                               (setq buffer-undo-list nil)))
(global-auto-revert-mode)

;; Default theme
(if window-system
    (load-theme `zenburn t)
    (load-theme `zenburn t))
;    (load-theme `zenburn-console t))

;; Setup auto complete
(require 'auto-complete-config)
(ac-config-default)

;; Setup clang integration
(require 'auto-complete-clang)
(setq clang-completion-suppress-error 't)

(defun my-c-mode-common-hook()
 ;; (setq ac-auto-start nil)
  (setq ac-expand-on-auto-complete nil)
  (setq ac-quick-help-delay 0.3)
  (define-key c-mode-base-map (kbd "M-/") 'ac-complete-clang)
  (lambda () (subword-mode 1))
  (flyspell-prog-mode)
  (flycheck-mode)
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;; Setup Haskell
(require `agda-input)
(require `shm)
(require `shm-case-split)
(define-key shm-map (kbd "C-c C-s") 'shm/case-split)
(intero-global-mode 1)
(add-hook 'haskell-mode-hook (lambda ()
                               (imenu-add-menubar-index)
                               (flyspell-prog-mode)
                               (setq-default fill-column 125)
                               (set-input-method "Agda")
                               (haskell-indentation-mode -1)
                               (structured-haskell-mode)))


;; Outline mode
(outline-minor-mode 1)
(global-set-key [M-up] 'outline-hide-sublevels)
(global-set-key [M-down] 'outline-show-all)

;; Markdown mode
(add-hook 'markdown-mode-hook (lambda ()
                                (flyspell-mode t)
                                (interactive)
                                (flyspell-buffer)
                                (global-set-key (kbd "<kp-0>") 'insert-ETR)
                                (global-set-key (kbd "<kp-1>") 'insert-GradeLine)
                                (global-set-key (kbd "<kp-2>") 'insert-HWRubric)
                                (global-set-key (kbd "<kp-7>") 'insert-FullMarks)
                                (global-set-key (kbd "<kp-8>") 'insert-PartialCredit)
                                (global-set-key (kbd "<kp-9>") 'insert-NotAttempted)))

;; Custom key commands
(global-set-key (kbd "<print>") 'goto-line) ;Scroll Lock key


;; Whitespace setup
(require 'whitespace)
(add-hook 'c-mode-hook (lambda () (whitespace-mode t)))
(add-hook 'c++-mode-hook (lambda () (whitespace-mode t)))
(add-hook 'jav-amode-hook (lambda () (whitespace-mode t)))
(add-hook 'haskell-mode-hook (lambda () (whitespace-mode t)))

;; Rainbow parens
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

;; Yesod setup
;;(require 'shakespeare-mode)
;(setq auto-mode-alist (cons '("\\.julius$" . javascript-mode) auto-mode-alist))
;(setq auto-mode-alist (cons '("\\.lucius$" . css-mode) auto-mode-alist))
;(setq auto-mode-alist (cons '("\\.hamlet$" . html-mode) auto-mode-alist))

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))

(global-set-key (kbd "C-c d") 'insert-date)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(defun insert-date ()
  "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))

(defun insert-ETR ()
  "Insert **ETR** followed by yank"
  (interactive)
  (insert "\n    **ETR** ")
  (yank)
  (previous-line 1)
  (move-end-of-line nil))

(defun insert-GradeLine ()
  "Go to the first line and insert an empty grade"
  (goto-char (point-min))
  (interactive)
  (insert "Grade: \n")
  (insert "Graded: ")
  (insert-date)
  (insert "\n\n---\n\n")
  (previous-line 5)
  (move-end-of-line nil))

(defun insert-HWRubric ()
  "Inserts the ERAU ISTA220/422 HW Rubric"
  (interactive)
  (insert-FilenameFooter)
  (goto-char (point-min))
  (insert "# Grading Rubric\n")
  (insert "Graded: ")
  (insert-date)
  (insert "\n\n")
  (insert "Criteria             | Rating\n")
  (insert "---------------------|-------\n")
  (insert "Basic Knowledge      | \n")
  (insert "Developing Knowledge | \n")
  (insert "Advanced Knowledge   | \n\n")
  (insert "---\n\n")
  (previous-line 6)
  (move-end-of-line nil))

(defun insert-FullMarks () (interactive) (insert "FM") (next-line) (move-end-of-line nil))
(defun insert-PartialCredit () (interactive) (insert "PC") (next-line) (move-end-of-line nil))
(defun insert-NotAttempted () (interactive) (insert "NA") (next-line) (move-end-of-line nil))

(defun insert-FilenameFooter ()
  (interactive)
  (goto-char (point-max))
  (insert "\n\n\\vfill"
          "\n\n---\n\n"
          "Rendered from `"
          (file-name-nondirectory buffer-file-name) "`\n"))

(global-set-key (kbd "<kp-add>") (lambda () (interactive) (ibuffer) (next-line) (ibuffer-visit-buffer)))

;(set-face-attribute 'default nil :height 55)

;; Automatically set variables
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(c-basic-offset 4)
 '(c-default-style
   (quote
    ((c-mode . "bsd")
     (c++-mode . "bsd")
     (java-mode . "java")
     (awk-mode . "awk")
     (other . "gnu"))))
 '(c-macro-preprocessor "clang -x c++ -E -C -")
 '(c-offsets-alist
   (quote
    ((statement-case-open . 0)
     (substatement-open . 0)
     (case-label . +)
     (access-label . -2))))
 '(custom-safe-themes
   (quote
    ("e7381667a4ed6c1d7f1779811024394f0c13a65410711a75989cf7d95561e79a" "94a075bc3880c9855a75f92682b1028ffb7aedaeb6063665e1d97b2c41275d8c" "9758eb3d14cd3df882df3de51720e7815b6dba756ab678626c5a14865f69e75c" "cb7b0bf0d8012a6f7c530a556b9b0369927568ead5b6308f303063f2f02d26f1" "b60bac121c159bbe91f8b7e33ef365be6d3ff4425f80484b0abdf2ccf0fd9563" "cdc90db3996dcc3cf4f48a8a9464513da4e3711ddf02ffbd7d886130e48669f1" "a8bb49da77d0f8c237f858ee24018a63a8b7af320dd7af776296c80f9d80783b" "1a74b6f321e1295c618f9da82da4aa575eb472909432246b603fd448dd4ed058" "bf7ed640479049f1d74319ed004a9821072c1d9331bc1147e01d22748c18ebdf" "be7eadb2971d1057396c20e2eebaa08ec4bfd1efe9382c12917c6fe24352b7c1" default)))
 '(ecb-options-version "2.40")
 '(flymake-no-changes-timeout 3600)
 '(flymake-start-syntax-check-on-newline nil)
 '(haskell-indent-after-keywords
   (quote
    (("where" 2 0)
     ("of" 2)
     ("do" 4)
     ("in" 2 0)
     ("{" 2)
     "if" "then" "else" "let")))
 '(haskell-indent-spaces 4)
 '(haskell-indent-thenelse 2)
 '(indent-tabs-mode nil)
 '(inferior-haskell-find-project-root t)
 '(inhibit-startup-screen t)
 '(jit-lock-defer-time nil)
 '(make-backup-files nil)
 '(org-agenda-files (quote ("~/Projects/upenn/todo.org")))
 '(org-hierarchical-todo-statistics nil)
 '(package-selected-packages
   (quote
    (csharp-mode markdown-mode cmake-mode rainbow-delimiters shakespeare-mode intero)))
 '(safe-local-variable-values
   (quote
    ((haskell-indent-spaces . 4)
     (haskell-process-use-ghci . t)
     (hamlet/basic-offset . 4))))
 '(shm-lambda-indent-style (quote leftmost-parent))
 '(show-paren-mode t)
 '(speedbar-default-position (quote right))
 '(whitespace-action (quote (auto-cleanup)))
 '(whitespace-line-column 800))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(flycheck-error ((t (:underline "red2"))))
 '(whitespace-space ((t (:background "nil" :foreground "#4F4F4F")))))
